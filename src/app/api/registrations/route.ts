// src/app/api/registrations/route.ts
import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";
import { generatePaymentQR } from "@/lib/qr";
import { sendRegistrationEmails } from "@/lib/email";

export async function POST(request: Request) {
  const { eventId, eventDateId, name, email, attendees } = await request.json();

  if (!eventId || !eventDateId || !name || !email || !attendees) {
    return NextResponse.json({ error: "Chyb√≠ po≈æadovan√° pole." }, { status: 400 });
  }

  try {
    // 1Ô∏è‚É£ Ulo≈æit registraci
    await prisma.registration.create({
      data: {
        eventId: Number(eventId),
        eventDateId: Number(eventDateId),
        name,
        email,
        attendees: Number(attendees),
      },
    });

    // 2Ô∏è‚É£ Naƒç√≠st informace o akci a term√≠nu z DB
    const [event, eventDate] = await Promise.all([
      prisma.event.findUnique({
        where: { id: Number(eventId) },
        select: {
          name: true,
          location: true,
          amountCZK: true,
          variableSymbol: true,
          accountNumber: true, // üëà mus√≠≈° naƒç√≠st explicitnƒõ
        },
      }),
      prisma.eventDate.findUnique({
        where: { id: Number(eventDateId) },
        select: {
          date: true,
        },
      }),
    ]);

    if (!event || !eventDate) {
      return NextResponse.json({ error: "Akce nebo term√≠n nenalezen." }, { status: 404 });
    }

    // 3Ô∏è‚É£ Spoƒç√≠tat celkovou cenu podle poƒçtu osob
    const totalAmount = event.amountCZK * Number(attendees);

    // 4Ô∏è‚É£ Vygenerovat QR k√≥d (nap≈ô. pro zobrazen√≠ ve FE nebo odesl√°n√≠ e-mailem)
    const qrCodeUrl = generatePaymentQR(totalAmount, event.variableSymbol, event.accountNumber);

    // 5Ô∏è‚É£ Odeslat e-maily
    await sendRegistrationEmails({
      userName: name,
      userEmail: email,
      attendees: Number(attendees),
      eventName: event.name,
      eventLocation: event.location,
      eventDate: eventDate.date.toLocaleString("cs-CZ"),
      adminEmail: process.env.ADMIN_EMAIL!,
      variableSymbol: event.variableSymbol,
      amountCZK: totalAmount,
      accountNumber: event.accountNumber,
      qrCodeUrl, // pokud typ pot≈ôebuje≈°, m≈Ø≈æe≈° p≈ôidat i do email.ts
    });

    return NextResponse.json({ message: "Registrace √∫spƒõ≈°n√°." });
  } catch (error) {
    console.error(error);
    return NextResponse.json({ error: "Chyba p≈ôi registraci." }, { status: 500 });
  }
}